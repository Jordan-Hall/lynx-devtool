name: Build and Release

on:
  push:
    tags:
      - 'v*'
      
permissions:
  contents: write
  
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_type: ${{ steps.release_type.outputs.RELEASE_TYPE }}
      asset_suffix: ${{ steps.release_type.outputs.ASSET_SUFFIX }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set release type
        id: release_type
        run: |
          if [[ ${{ github.ref }} =~ .*-alpha.* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "RELEASE_TYPE=Alpha" >> $GITHUB_OUTPUT
            echo "ASSET_SUFFIX=alpha" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} =~ .*-beta.* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "RELEASE_TYPE=Beta" >> $GITHUB_OUTPUT
            echo "ASSET_SUFFIX=beta" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "RELEASE_TYPE=Release" >> $GITHUB_OUTPUT
            echo "ASSET_SUFFIX=release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.release_type.outputs.RELEASE_TYPE }} ${{ github.ref }}
          draft: false
          prerelease: ${{ steps.release_type.outputs.IS_PRERELEASE }}
          body: |
            ${{ steps.release_type.outputs.IS_PRERELEASE == 'true' && 'ðŸš§ This is a pre-release version that may contain unstable features.

            ### Release Notes
            - This is a pre-release version for testing purposes only
            - Not recommended for production use' || github.ref }}

  build-and-upload-mac:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x64]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.20.2
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.33.6
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pnpm install

      - name: Fetch depot_tools
        shell: bash
        run: pnpm run fetch:depot_tools
      
      - name: Add depot_tools to PATH
        shell: bash
        run: |
          echo "${{ github.workspace }}/packages/devtools-frontend-lynx/buildtools/depot_tools" >> $GITHUB_PATH
          
      - name: Sync devtools-gn
        shell: bash
        run: pnpm run sync:devtools-gn

      - name: Build devtools
        shell: bash
        run: pnpm run build:devtools

      - name: Sync devtools-dist
        shell: bash
        run: pnpm run sync:devtools-dist

      - name: Build all packages
        run: pnpm run build:all

      - name: Build Mac installer
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run production:mac

      - name: Find Mac installer
        id: find_installer
        shell: bash
        run: |
          installer=$(find ./dist -name "*.dmg" -print -quit)
          if [ -z "$installer" ]; then
            echo "Installer not found"
            exit 1
          fi
          installer_path=$(realpath "$installer")
          installer_name=$(basename "$installer")
          echo "Found installer at: $installer_path"
          echo "installer_path=$installer_path" >> $GITHUB_OUTPUT
          echo "installer_name=$installer_name" >> $GITHUB_OUTPUT

      - name: Upload Mac installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_installer.outputs.installer_path }}
          asset_name: ${{ steps.find_installer.outputs.installer_name }}
          asset_content_type: application/octet-stream

  build-and-upload-windows:
    needs: create-release
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.20.2
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.33.6
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pnpm install

      - name: Fetch depot_tools
        shell: bash
        run: pnpm run fetch:depot_tools
      
      - name: Add depot_tools to PATH
        shell: bash
        run: |
          echo "${{ github.workspace }}/packages/devtools-frontend-lynx/buildtools/depot_tools" >> $GITHUB_PATH
          
      - name: Sync devtools-gn
        shell: bash
        run: pnpm run sync:devtools-gn

      - name: Build devtools
        shell: bash
        run: pnpm run build:devtools

      - name: Sync devtools-dist
        shell: bash
        run: pnpm run sync:devtools-dist

      - name: Build all packages
        run: pnpm run build:all

      - name: Build Windows installer
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run production:win-x64

      - name: Find Windows installer
        id: find_installer
        shell: powershell
        run: |
          $installer = Get-ChildItem -Path "./dist" -Recurse -Filter "*.exe" | Select-Object -First 1
          if (-not $installer) {
            Write-Error "Installer not found"
            exit 1
          }
          $installerPath = $installer.FullName
          $installerName = $installer.Name
          Write-Output "Found installer at: $installerPath"
          "installer_path=$installerPath" >> $env:GITHUB_OUTPUT
          "installer_name=$installerName" >> $env:GITHUB_OUTPUT

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_installer.outputs.installer_path }}
          asset_name: ${{ steps.find_installer.outputs.installer_name }}
          asset_content_type: application/octet-stream
